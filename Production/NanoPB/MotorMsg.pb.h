/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9-dev at Mon Jul 31 19:33:22 2017. */

#ifndef PB_MOTORMSG_PB_H_INCLUDED
#define PB_MOTORMSG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _DataAction {
    DataAction_UKNONWN_ACTION = 0,
    DataAction_GET = 1,
    DataAction_RESULT = 2
} DataAction;
#define _DataAction_MIN DataAction_UKNONWN_ACTION
#define _DataAction_MAX DataAction_RESULT
#define _DataAction_ARRAYSIZE ((DataAction)(DataAction_RESULT+1))

typedef enum _MotorAction {
    MotorAction_UNKNOWN = 0,
    MotorAction_BRAKE = 1,
    MotorAction_FREEWHEEL = 2,
    MotorAction_RUN = 3,
    MotorAction_GOTO_POS = 4
} MotorAction;
#define _MotorAction_MIN MotorAction_UNKNOWN
#define _MotorAction_MAX MotorAction_GOTO_POS
#define _MotorAction_ARRAYSIZE ((MotorAction)(MotorAction_GOTO_POS+1))

typedef enum _MotorDataId {
    MotorDataId_UNKNOWN_ID = 0,
    MotorDataId_UUID = 1,
    MotorDataId_VERSION = 2,
    MotorDataId_MFG_DATE_YYYYMMDD = 3,
    MotorDataId_MFG_ID = 4,
    MotorDataId_MODEL_ID = 5,
    MotorDataId_STEP_COUNT = 6,
    MotorDataId_INDUCTANCE = 8,
    MotorDataId_CUR_POS = 12,
    MotorDataId_CUR_AMP = 13,
    MotorDataId_CUR_VOLT = 14
} MotorDataId;
#define _MotorDataId_MIN MotorDataId_UNKNOWN_ID
#define _MotorDataId_MAX MotorDataId_CUR_VOLT
#define _MotorDataId_ARRAYSIZE ((MotorDataId)(MotorDataId_CUR_VOLT+1))

typedef enum _Unit {
    Unit_UNKNOWN_UNIT = 0,
    Unit_STRING = 1,
    Unit_BOOLEAN = 2,
    Unit_INTEGER = 3,
    Unit_DOUBLE = 4,
    Unit_SECOND = 5,
    Unit_DEGREE = 6,
    Unit_AMP = 7,
    Unit_VOLT = 8,
    Unit_NEWTON = 9,
    Unit_UHENRY = 10
} Unit;
#define _Unit_MIN Unit_UNKNOWN_UNIT
#define _Unit_MAX Unit_UHENRY
#define _Unit_ARRAYSIZE ((Unit)(Unit_UHENRY+1))

typedef enum _MotorCmdParamId {
    MotorCmdParamId_UNKNOWN_PARAM = 0,
    MotorCmdParamId_CLOCKWISE = 1,
    MotorCmdParamId_POSITION = 2,
    MotorCmdParamId_VELOCITY = 3,
    MotorCmdParamId_ACCEL = 4,
    MotorCmdParamId_HOLD_TORQUE = 5,
    MotorCmdParamId_BREAKAWAY = 6,
    MotorCmdParamId_MIN_CURRENT_LIMIT = 7,
    MotorCmdParamId_MAX_CURRENT_LIMIT = 8,
    MotorCmdParamId_MIN_VOLT_VELOCITY = 9,
    MotorCmdParamId_MAX_VOLT_VELOCITY = 10,
    MotorCmdParamId_MIN_VOLTAGE_LIMIT = 11,
    MotorCmdParamId_MAX_VOLTAGE_LIMIT = 12
} MotorCmdParamId;
#define _MotorCmdParamId_MIN MotorCmdParamId_UNKNOWN_PARAM
#define _MotorCmdParamId_MAX MotorCmdParamId_MAX_VOLTAGE_LIMIT
#define _MotorCmdParamId_ARRAYSIZE ((MotorCmdParamId)(MotorCmdParamId_MAX_VOLTAGE_LIMIT+1))

/* Struct definitions */
typedef struct _CmdParam {
    MotorCmdParamId id;
    double value;
    Unit unit;
/* @@protoc_insertion_point(struct:CmdParam) */
} CmdParam;

typedef struct _DataParam {
    MotorDataId id;
    double value;
    Unit unit;
/* @@protoc_insertion_point(struct:DataParam) */
} DataParam;

typedef struct _MotorCmd {
    MotorAction action;
    pb_callback_t params;
/* @@protoc_insertion_point(struct:MotorCmd) */
} MotorCmd;

typedef struct _MotorData {
    DataAction action;
    pb_callback_t params;
/* @@protoc_insertion_point(struct:MotorData) */
} MotorData;

typedef struct _MotorMsg {
    char uuid[36];
    pb_size_t which_content;
    union {
        MotorData motorData;
        MotorCmd motorCmd;
    } content;
/* @@protoc_insertion_point(struct:MotorMsg) */
} MotorMsg;

/* Default values for struct fields */

/* Initializer values for message structs */
#define MotorData_init_default                   {(DataAction)0, {{NULL}, NULL}}
#define MotorCmd_init_default                    {(MotorAction)0, {{NULL}, NULL}}
#define MotorMsg_init_default                    {"", 0, {MotorData_init_default}}
#define DataParam_init_default                   {(MotorDataId)0, 0, (Unit)0}
#define CmdParam_init_default                    {(MotorCmdParamId)0, 0, (Unit)0}
#define MotorData_init_zero                      {(DataAction)0, {{NULL}, NULL}}
#define MotorCmd_init_zero                       {(MotorAction)0, {{NULL}, NULL}}
#define MotorMsg_init_zero                       {"", 0, {MotorData_init_zero}}
#define DataParam_init_zero                      {(MotorDataId)0, 0, (Unit)0}
#define CmdParam_init_zero                       {(MotorCmdParamId)0, 0, (Unit)0}

/* Field tags (for use in manual encoding/decoding) */
#define CmdParam_id_tag                          1
#define CmdParam_value_tag                       2
#define CmdParam_unit_tag                        3
#define DataParam_id_tag                         1
#define DataParam_value_tag                      2
#define DataParam_unit_tag                       3
#define MotorCmd_action_tag                      1
#define MotorCmd_params_tag                      2
#define MotorData_action_tag                     1
#define MotorData_params_tag                     2
#define MotorMsg_motorData_tag                   2
#define MotorMsg_motorCmd_tag                    3
#define MotorMsg_uuid_tag                        1

/* Struct field encoding specification for nanopb */
extern const pb_field_t MotorData_fields[3];
extern const pb_field_t MotorCmd_fields[3];
extern const pb_field_t MotorMsg_fields[4];
extern const pb_field_t DataParam_fields[4];
extern const pb_field_t CmdParam_fields[4];

/* Maximum encoded size of messages (where known) */
/* MotorData_size depends on runtime parameters */
/* MotorCmd_size depends on runtime parameters */
/* MotorMsg_size depends on runtime parameters */
#define DataParam_size                           13
#define CmdParam_size                            13

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MOTORMSG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
