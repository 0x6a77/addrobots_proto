/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9-dev at Sat May 26 22:38:57 2018. */

#ifndef PB_MOTORMSG_PB_H_INCLUDED
#define PB_MOTORMSG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _McuWrapper_Unit {
    McuWrapper_Unit_UNKNOWN_UNIT = 0,
    McuWrapper_Unit_STRING = 1,
    McuWrapper_Unit_BOOLEAN = 2,
    McuWrapper_Unit_INTEGER = 3,
    McuWrapper_Unit_DOUBLE = 4,
    McuWrapper_Unit_SECOND = 5,
    McuWrapper_Unit_DEGREE = 6,
    McuWrapper_Unit_AMP = 7,
    McuWrapper_Unit_VOLT = 8,
    McuWrapper_Unit_NEWTON = 9,
    McuWrapper_Unit_UHENRY = 10
} McuWrapper_Unit;
#define _McuWrapper_Unit_MIN McuWrapper_Unit_UNKNOWN_UNIT
#define _McuWrapper_Unit_MAX McuWrapper_Unit_UHENRY
#define _McuWrapper_Unit_ARRAYSIZE ((McuWrapper_Unit)(McuWrapper_Unit_UHENRY+1))

typedef enum _McuWrapper_MotorData_DataAction {
    McuWrapper_MotorData_DataAction_UKNONWN_ACTION = 0,
    McuWrapper_MotorData_DataAction_GET = 1,
    McuWrapper_MotorData_DataAction_RESULT = 2
} McuWrapper_MotorData_DataAction;
#define _McuWrapper_MotorData_DataAction_MIN McuWrapper_MotorData_DataAction_UKNONWN_ACTION
#define _McuWrapper_MotorData_DataAction_MAX McuWrapper_MotorData_DataAction_RESULT
#define _McuWrapper_MotorData_DataAction_ARRAYSIZE ((McuWrapper_MotorData_DataAction)(McuWrapper_MotorData_DataAction_RESULT+1))

typedef enum _McuWrapper_MotorData_DataParam_MotorDataId {
    McuWrapper_MotorData_DataParam_MotorDataId_UNKNOWN_ID = 0,
    McuWrapper_MotorData_DataParam_MotorDataId_UUID = 1,
    McuWrapper_MotorData_DataParam_MotorDataId_VERSION = 2,
    McuWrapper_MotorData_DataParam_MotorDataId_MFG_DATE_YYYYMMDD = 3,
    McuWrapper_MotorData_DataParam_MotorDataId_MFG_ID = 4,
    McuWrapper_MotorData_DataParam_MotorDataId_MODEL_ID = 5,
    McuWrapper_MotorData_DataParam_MotorDataId_STEP_COUNT = 6,
    McuWrapper_MotorData_DataParam_MotorDataId_INDUCTANCE = 8,
    McuWrapper_MotorData_DataParam_MotorDataId_CUR_POS = 12,
    McuWrapper_MotorData_DataParam_MotorDataId_CUR_AMP = 13,
    McuWrapper_MotorData_DataParam_MotorDataId_CUR_VOLT = 14
} McuWrapper_MotorData_DataParam_MotorDataId;
#define _McuWrapper_MotorData_DataParam_MotorDataId_MIN McuWrapper_MotorData_DataParam_MotorDataId_UNKNOWN_ID
#define _McuWrapper_MotorData_DataParam_MotorDataId_MAX McuWrapper_MotorData_DataParam_MotorDataId_CUR_VOLT
#define _McuWrapper_MotorData_DataParam_MotorDataId_ARRAYSIZE ((McuWrapper_MotorData_DataParam_MotorDataId)(McuWrapper_MotorData_DataParam_MotorDataId_CUR_VOLT+1))

typedef enum _McuWrapper_MotorCmd_MotorAction {
    McuWrapper_MotorCmd_MotorAction_UNKNOWN = 0,
    McuWrapper_MotorCmd_MotorAction_BRAKE = 1,
    McuWrapper_MotorCmd_MotorAction_FREEWHEEL = 2,
    McuWrapper_MotorCmd_MotorAction_RUN = 3,
    McuWrapper_MotorCmd_MotorAction_GOTO_POS = 4
} McuWrapper_MotorCmd_MotorAction;
#define _McuWrapper_MotorCmd_MotorAction_MIN McuWrapper_MotorCmd_MotorAction_UNKNOWN
#define _McuWrapper_MotorCmd_MotorAction_MAX McuWrapper_MotorCmd_MotorAction_GOTO_POS
#define _McuWrapper_MotorCmd_MotorAction_ARRAYSIZE ((McuWrapper_MotorCmd_MotorAction)(McuWrapper_MotorCmd_MotorAction_GOTO_POS+1))

typedef enum _McuWrapper_MotorCmd_CmdParam_MotorCmdParamId {
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_UNKNOWN_PARAM = 0,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_CLOCKWISE = 1,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_POSITION = 2,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_VELOCITY = 3,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_ACCEL = 4,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_HOLD_TORQUE = 5,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_BREAKAWAY = 6,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MIN_CURRENT_LIMIT = 7,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MAX_CURRENT_LIMIT = 8,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MIN_VOLT_VELOCITY = 9,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MAX_VOLT_VELOCITY = 10,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MIN_VOLTAGE_LIMIT = 11,
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MAX_VOLTAGE_LIMIT = 12
} McuWrapper_MotorCmd_CmdParam_MotorCmdParamId;
#define _McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MIN McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_UNKNOWN_PARAM
#define _McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MAX McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MAX_VOLTAGE_LIMIT
#define _McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_ARRAYSIZE ((McuWrapper_MotorCmd_CmdParam_MotorCmdParamId)(McuWrapper_MotorCmd_CmdParam_MotorCmdParamId_MAX_VOLTAGE_LIMIT+1))

/* Struct definitions */
typedef struct _McuWrapper_MotorCmd {
    McuWrapper_MotorCmd_MotorAction action;
    pb_callback_t params;
/* @@protoc_insertion_point(struct:McuWrapper_MotorCmd) */
} McuWrapper_MotorCmd;

typedef struct _McuWrapper_MotorCmd_CmdParam {
    McuWrapper_MotorCmd_CmdParam_MotorCmdParamId id;
    double value;
    McuWrapper_Unit unit;
/* @@protoc_insertion_point(struct:McuWrapper_MotorCmd_CmdParam) */
} McuWrapper_MotorCmd_CmdParam;

typedef struct _McuWrapper_MotorData {
    McuWrapper_MotorData_DataAction action;
    pb_callback_t params;
/* @@protoc_insertion_point(struct:McuWrapper_MotorData) */
} McuWrapper_MotorData;

typedef struct _McuWrapper_MotorData_DataParam {
    McuWrapper_MotorData_DataParam_MotorDataId id;
    double value;
    McuWrapper_Unit unit;
/* @@protoc_insertion_point(struct:McuWrapper_MotorData_DataParam) */
} McuWrapper_MotorData_DataParam;

typedef struct _McuWrapper {
    char uuid[36];
    pb_size_t which_content;
    union {
        McuWrapper_MotorData motor_data;
        McuWrapper_MotorCmd motor_cmd;
    } content;
/* @@protoc_insertion_point(struct:McuWrapper) */
} McuWrapper;

/* Default values for struct fields */

/* Initializer values for message structs */
#define McuWrapper_init_default                  {"", 0, {McuWrapper_MotorData_init_default}}
#define McuWrapper_MotorData_init_default        {(McuWrapper_MotorData_DataAction)0, {{NULL}, NULL}}
#define McuWrapper_MotorData_DataParam_init_default {(McuWrapper_MotorData_DataParam_MotorDataId)0, 0, (McuWrapper_Unit)0}
#define McuWrapper_MotorCmd_init_default         {(McuWrapper_MotorCmd_MotorAction)0, {{NULL}, NULL}}
#define McuWrapper_MotorCmd_CmdParam_init_default {(McuWrapper_MotorCmd_CmdParam_MotorCmdParamId)0, 0, (McuWrapper_Unit)0}
#define McuWrapper_init_zero                     {"", 0, {McuWrapper_MotorData_init_zero}}
#define McuWrapper_MotorData_init_zero           {(McuWrapper_MotorData_DataAction)0, {{NULL}, NULL}}
#define McuWrapper_MotorData_DataParam_init_zero {(McuWrapper_MotorData_DataParam_MotorDataId)0, 0, (McuWrapper_Unit)0}
#define McuWrapper_MotorCmd_init_zero            {(McuWrapper_MotorCmd_MotorAction)0, {{NULL}, NULL}}
#define McuWrapper_MotorCmd_CmdParam_init_zero   {(McuWrapper_MotorCmd_CmdParam_MotorCmdParamId)0, 0, (McuWrapper_Unit)0}

/* Field tags (for use in manual encoding/decoding) */
#define McuWrapper_MotorCmd_action_tag           1
#define McuWrapper_MotorCmd_params_tag           2
#define McuWrapper_MotorCmd_CmdParam_id_tag      1
#define McuWrapper_MotorCmd_CmdParam_value_tag   2
#define McuWrapper_MotorCmd_CmdParam_unit_tag    3
#define McuWrapper_MotorData_action_tag          1
#define McuWrapper_MotorData_params_tag          2
#define McuWrapper_MotorData_DataParam_id_tag    1
#define McuWrapper_MotorData_DataParam_value_tag 2
#define McuWrapper_MotorData_DataParam_unit_tag  3
#define McuWrapper_motor_data_tag                2
#define McuWrapper_motor_cmd_tag                 3
#define McuWrapper_uuid_tag                      1

/* Struct field encoding specification for nanopb */
extern const pb_field_t McuWrapper_fields[4];
extern const pb_field_t McuWrapper_MotorData_fields[3];
extern const pb_field_t McuWrapper_MotorData_DataParam_fields[4];
extern const pb_field_t McuWrapper_MotorCmd_fields[3];
extern const pb_field_t McuWrapper_MotorCmd_CmdParam_fields[4];

/* Maximum encoded size of messages (where known) */
/* McuWrapper_size depends on runtime parameters */
/* McuWrapper_MotorData_size depends on runtime parameters */
#define McuWrapper_MotorData_DataParam_size      13
/* McuWrapper_MotorCmd_size depends on runtime parameters */
#define McuWrapper_MotorCmd_CmdParam_size        13

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MOTORMSG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
